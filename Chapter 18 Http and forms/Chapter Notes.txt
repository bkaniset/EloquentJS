Http stands for hyper text transfer protocol. 

When you type eloquentjavascript.net/18_http.html into your browser, 

1. The browser look up the ip address for the website https://eloquentjavascript.net. 
2. If it exists, the opens a TCP connection to that ip address on port 80. 
3. The server then accepts the connection. 
4. The browser then sends to the server something like this;  

GET /18_http.html HTTP/1.1
Host: eloquentjavascript.net
User-Agent: Your browser's name

The server responds, on the same connection, something like this; 

HTTP/1.1 200 OK
Content-Length: 65585
Content-Type: text/html
Last-Modified: Mon, 08 Jan 2018 10:29:45 GMT
<!doctype html>
... the rest of the document

What is this? 

1. The information sent from the client(browser, in this case) is called a request. 

It starts with the line GET /18_http.html HTTP/1.1. 

The first word GET is the method of the request. There are other methods as well; 

GET - the client wants to get the resource. 
POST - to modify or edit the resource. 
PUT - To create a resource or replace a resource. 
DELETE - To delete a resource. 

There are many more http methods. Note that a server is not obliged to carry out every request. 

The second part of the first line is the path of the resource. A resource is anything that can be 
transferred over the the internet as if it is file. 

The third part is the version of http that is being used. 

The server's response also starts with the http version, status code and explanation for the status code. 

Browsers and Http: 

This is an example of a form 

<form method="GET" action="example/message.html">
<p>Name: <input type="text" name="name"></p>
<p>Message: <br><textarea name="message"></textarea></p>
<p><button type="submit">Send</button></p>
</form> 

When a form's method is GET(or omitted) info is sent to the server as part of the URL. 
for example: 

GET /example/message.html?name=Jean&message=Yes%3F HTTP/1.1 

Some characters in the URI have multiple meanings and are escaped. This process is called URL encoding.  
JS uses the below functions to encode to and decode from this format. 

encodeURIComponent and decodeURIComponent. 

If we change the form method to POST - the browser send the information in its body, rather than in the URL. 

Fetch Interface 

browsers make http requests through an interface called fetch, which uses promises. 
Eg: 

fetch("example/data.txt").then(response => {
console.log(response.statusCode);
console.log(response.headers.get("content-type"));
});

This fetch returns a promise that resolves to a response object- which represents the response of the server. 
It contains various properties relavant to the response and its headers are wrapped in a MAP like object. 

To get the response as text, we can use the text method of the response Object. 

fetch("example/data.txt").then(res => res.text()).then(text => console.log(text)); Since the response takes longer to load than its headers 

response.text() Method also returns a promise. 

Fetch is interesting ! Study More. 

HTTP and Focus 

<input type="text">
<script>
document.querySelector("input").focus();
console.log(document.activeElement.tagName); // Prints "INPUT" to the console.  
document.querySelector("input").blur(); 
console.log(document.activeElement.tagName); // Prints "BODY" to the console.  
</script>

Most elements are not focusable. Tab Key progresses the user to go through the elements that are focusable 
by applying the tabindex property. 

DISABLED FIELDS. 

Disabled attribute disables the button. It does not have a value. 

The Form as a Whole 


A field can either be by itself or as a part of a form. When it is, its DOM has a form property linking
back to the form's DOM element. The Form element, in turn, has a property called elements, which returns 
an array like collection of fields inside it. 

<form action="example/submit.html"> 
Name :<input type="text" name="name"><br>
Password :<input type="password" name="password"><br>
<button type="submit">Log in</button>
</form>
<script>
let form = document.querySelector("form");
console.log(form.elements[1].type); // Prints Password. Remember array indexing starts from 0. 
console.log(form.elements.password.type); // Also prints password. 
console.log(from.elements.name.form == form)  // Prints true. 
</script>

When a user clicks submit, the browser navigates to the page indicated by the action attribute of the form by using 
either a GET or a POST request. Before that, a submit event if fired. You can do front end validation like this; 

<form action="example/submit.html"> 
Name :<input type="text" name="name"><br>
Password :<input type="password" name="password"><br>
<button type="submit">Log in</button>
</form>
<script>
let f=document.querySelector("form");
f.addEventListener("submit", event => {
event.preventDefault();
});
</script>

Checkboxes and Radio Buttons 

Below code changes the background of a page when the checkbox is selected. 

<label> 
<input type="checkbox" id="purple">Make this Page purple.
</label>
<script>
let checkbox = document.querySelector("#purple");
checkbox.addEventListener("change", ()=> {
document.body.style.background = checkbox.checked ? "mediumpurple" : "" ;  
});
</script>

Label tag associated a field with the piece of the document. 
Below code changes the colour of the background according to the radio box selected. 

<label>
<input type="radio" name="color" value = "orange"> Orange 
</label>
<label>
<input type="radio" name="color" value = "lightgreen"> Light Green
</label>
<label>
<input type="radio" name="color" value = "lightblue"> Light Blue 
</label>
<script>
let buttons = document.querySelectorAll("[name=color]") ; 
for (let buttons of Array.from(buttons)) 
{
button.addEventListener("change", () => {
document.body.style.background = button.value;
});
}
</script>

Select Fields 

<select multiple>
<option value="1">1</option>
<option value="2">2</option>
<option value="3">3</option>
<option value="4">4</option>
</select> <span id="output">0</span>
<script>
let options = document.querySelectorAll("select");
let output = document.querySelector("#output"); 
let number = 0;
for (let option of Array.from(options))
{
select.addEventListener("change" , () {
number += option.value; 
});
output.textContent = number;  
</script>

Files 

Below code uploads a file in the disk to a browser; 

<input type="file"> 
<script>
let input = document.querySelector("input");
input.addEventListener("change", () ={
if(input.files.length > 0)
{
let file = input.files[0]; 
console.log("You choose file", file.type); 
}
});
</script>

We can read a file that has been uploaded by using a FileReader object. 

<input type="file" multiple>
<script>
let input = document.queryselector("input");
input.addEventListener("change" , () => {
for(let file of Arrayfrom(input.files))
{
let reader = new FileReader(); 
reader.addEventListener("load" , () => {
console.log("File" , file.name , "Starts With" , reader.result.slice(0,20)); 
});
reader.readAsText(file);
}
}); 
</script>

Filereaders were written before promises - so if you want information about the success 
or failure of the file reading process, you would have to write your own promise.  

Storing Data Client Side 

The localStorage object can be used to store stuff in the browser's memory. 
Below is a crude note taking application. 

The sessionStorage object can be used to store data at the session level, 
which is lost when the session ends. 


