11.1.A Tracking Down the scalpel. 

Logic: 

1. For the starting nest, we need to check its own storage if it owns the scalpel. 
2. If not, then we need to get to the next nest which has the entry. 
3. The above would be the async function will stop when the nest.name = scalpe.location. 

async function locateScalpel(nest) { 
let current = nest.name;
  for (;;) {
    let next = await anyStorage(nest, current, "scalpel");
    if (next == current) return current;
    current = next;
  }
}


11.1.B Without Async 

function locateScalpel2(nest) {
  function loop(current) {
    return anyStorage(nest, current, "scalpel").then(next => {
      if (next == current) return current;
      else return loop(next);
    });
  }
  return loop(nest.name);
}


11.2 Building Promise All. 

The logic here is to run through the array of promises and if there is one rejected promise, return that value. 

function Promise_all(promises) {
  return new Promise((resolve, reject) => { setTimeout(() => {
  let res= false; 
  for(let i=0;i<promises.length;i++)
  {
     let p=promises[i];
     if(p.reject == null)
     {
      continue;
     } 
    else 
    {
     res=true;
    }      
  }
  if(res)
  {
  reject();
  }
    else
    {
    resolve("All Good on the western Front");
    }
  
  },1) ; 
});
}

// Test code.
Promise_all([]).then(array => {
  console.log("This should be []:", array);
});
function soon(val) {
  return new Promise(resolve => {
    setTimeout(() => resolve(val), Math.random() * 500);
  });
}
Promise_all([soon(1), soon(2), soon(3)]).then(array => {
  console.log("This should be [1, 2, 3]:", array);
});
Promise_all([soon(1), Promise.reject("X"), soon(3)])
  .then(array => {
    console.log("We should not get here");
  })
  .catch(error => {
    if (error != "X") {
      console.log("Unexpected failure:", error);
    }
  });

 