// Run code here in the context of Chapter 11


console.log("------------Example of callbacks---------------")

setTimeout(()=> console.log("Tick Tick Tick", 5));

console.log("------------Aync though callbacks--------------");




defineRequestType("note", (nest, content, source, done) => {
console.log(`${nest.name} received note: ${content}`);
done();
});

bigOak.readStorage("food caches" , caches => {
  let firstcache = caches[0];
  bigOak.readStorage(firstcache , info =>{
   console.log(info);                     
  });
});

console.log("------------Async Via Networks----------------");

bigOak.send("Cow Pasture" , "Note" , "Lets Caw at 7PM" , () => console.log("Note delivered."));


let fifteen = Promise.resolve(15); 
let check = fifteen.then(value => console.log(`got ${value}`));


function Storage(nest, name)
{
return new Promise(resolve => { nest.readStorage(name, result => resolve(result))});
}

Storage(bigOak, "enemies").then(value => console.log("got" , value)); 


new Promise((_, reject) => reject(new Error("Fail")))
.then(value => console.log("Handler 1")).catch( reason => { 
 console.log("Caught Failure " + reason); 
 return "nothing" ; 
  }).then(value => console.log("handler 2 " + value)); 


class TimedOut extends Error {} 


function request(nest , target , type, content) {
return new Promise((resolve, reject) => {
let done = false; 
function attempt(n)
  {
  nest.send( target, type, content, (failed, value) => { 
    done = true; 
    if (failed) reject(failed); 
    else resolve(value);
  }); 
  setTimeout(() => { 
  if(done) return;
  else if(n<3) attempt(n+1);  
  else reject(new TimedOut("Time Out"));
  }, 250);
  }
  attempt(1);
}); 
}

function requestType(name, handler) {
defineRequestType(name , (nest , content , source, callback) => {
  try {
  Promise.resolve(handler(nest ,content, source)).then(response => callback(null, response), failure =>callback(failure));
  } catch (exception)
  {
  callback(exception);
  }
}); 
}

requestType("ping", () => "pong");

function availableNeighbors(nest)
{
let requests = nest.neighbours.map(neighbor => {
return request(nest , neighbor, "ping").then(() => true, () => false); 
});
return Promise.all(requests).then(result => {
return nest.neighbors.filter((_,i)=>result[i]); 
});   
}

console.log("-------------------Network Flooding-----------------------");

everywhere(nest => { nest.state.gossip = []; } );

requestType("gossip", (nest, message, source) => { 
if(nest.state.gossip.includes(message)) return;  
console.log(`${nest.name} recieved gossip ${message} from ${source.name}`);
sendGossip(nest, message, source);
});

function sendGossip(nest, message, exceptFor = null)
{
nest.stage.gossip.push(message); 
for(let neighbor of nest.neighbors)
{
 if(neighbor == exceptFor) continue; 
 request(nest, neighbor, "gossip" , message); 
}
}


console.log("-------------------Message Routing-----------------------");

requestType("connections", (nest, {name, neighbors}, source) => {

  let connections = nest.state.connections;
  if (JSON.stringify(connections.get(name)) = JSON.stringify(neighbors)) return;
  connections.set(name, neighbors);  
  broadcastConnections(nest , name, source);
}); 

function broadcastConnections(nest , name , exceptFor = null) 
{
 for (let neighbor of nest.neighbors) 
 {
  if(neighbor == exceptFor) continue; 
   request(nest , neighbor, "connections" , {
   name, 
   neighbors : nest.state.connections.get(name);   
   }); 
 }
}

everywhere(nest => nest.state.connections = new Map();
          nest.state.connections.set(nest.name , nest.neighbors);
          broadcastConnections(nest, nest.name);
          );

function findRoute(from, to, connections) {
let work = [{at: from, via: null}];
for (let i = 0; i < work.length; i++) {
let {at, via} = work[i];
for (let next of connections.get(at) || []) {
if (next == to) return via;
if (!work.some(w => w.at == next)) {
work.push({at: next, via: via || next});
}
}
}
return null;
}

function routeRequest(nest, target, type, content) {
if (nest.neighbors.includes(target)) {
return request(nest, target, type, content);
} else {
let via = findRoute(nest.name, target,
nest.state.connections);
if (!via) throw new Error(`No route to ${target}`);
return request(nest, via, "route",
{target, type, content});
}
}
requestType("route", (nest, {target, type, content}) => {
return routeRequest(nest, target, type, content);
});


requestType("storage", (nest, name) => storage(nest, name)); 

function findInStorage(nest , name) 
{
return storage(nest , name).then(found => )
}



//findInStorage(bigOak, "events on 2017-12-21")
//  .then(console.log);
